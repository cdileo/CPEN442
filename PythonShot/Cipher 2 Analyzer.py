import string

cipherText = 'BMYDUBOHBMVZRVFNKUFRKVRMRCFRGVRUZNIUTFOFRDGBTZLFWPAIOHIXUCPHBUEOIBULSOTZETYDQLPKTFOKIXQFPKPLPHBKPBOHPOFQRSECBGRSDXVSVDCREOMORYZEILQMBGBUWDWPMGBUYDUBDRZRRQIBSRMLLFIBOHWDBPFLZEVRDYPGBUQMZSENRQECQMRZBPUTNKOFRDGBYRQMFNBPWPMHEOQKTERYZEVDHBGBILQMIBPMOEQXLUOEEVZEWPQMPFMLTSVRHXRCZELEOZCNFCQXFURTOZXPMVZNEOIXUKPNTSLMPKYEIZUAMIWPZIENBRZNSORFYIPVUFEQYDQBQMOPQMOFENCHSZWBFTLFOPUBTZTVLWQFRFFRZCENHLGXSVNKRZOZVRKRQMPZRCZORXBICRNPVZRVNYNYNYNDUKCGZNMBCPPOVDHBGBQFCURFWPAIENQPGCHXOEEZBUVRCREYBUQMNKOPRMXPFOYDUBMPPKVLRCFRLVCUZEUAGWQKVTOZLERDQMPKQKEZBLFRHCLUWDZEXPHCFGBPZVKUDREQFPTPZOIBVDTPXPZCFRTPIYZRIXFBWPAPRUZNIUTFOFRDGBCFPSPMFLGCPHVDHBGBDREQFPTPZOIBVDTPYRQPWLPHXPMYPKGLPHYDSLFRTPIXQFPKPLPHYUOEKVLGRINFGWSRMOZEUKOHEZRZOZVRKRRZLUULPHKURMNPDIRDGBUFCTOEADCRCHRVQXLFNZOEPBGCXPFOTVPIWBCBGCHBZRZOSOOBNPNKRFEZKXVDGRBPFUNPVDHBGBVRGYACRLPKTSLCFPZOSOOBYRYCLUSZWBITRNOHRVAUHWOXXPHMBKPLRFFRVDHBGBYRQMFNBPWPHADPCMOPMOZEEZVFRDGBCREYOZOSOPRERSULOEQMXPTVPIIBOHNPFOCFPSNMYGEOYIZNZCNEGWDLRDGBALWBCMCGPNRTNYEYKUQMPVMGZNGXZOSOMBRSSZPELUMPOKKBFYYDRTYGFPUKOHZPRQFRZROWRDGBUKCGKUFLMGRTKVWPZUNPDUPCFOVDHBGBXPHCLUGXTFUAMQQZDVYFRDGBGXNBOBUKLQZNUKZRTZBIFWRDGBSTLSXDLPOZILGKOMQXNDYGREZECGOZBUGVBLFRYDEOESQPOEBIVDHBGBPNFQUBOHWPAUEWENRQECALWBIBOHCFPSOMRVFNBPPZBUZNEOHGOERSDYBXVRFOFRLMBURSZNQPCPPNLSCNIKLUZWTIVETIVKZEVDHBGBDBULBPKURSECLSZNQXRCRSGWPHPWFOCBVDHBGBUKCGIPRQFPGTPLRFWPBPBUZNOLBPOBWPHIGWUEOEYDRLTSLGTVSVBXVDHBGBAUPOTOKUMOZEUFESBPVRRCNCIVVMRVAUHWOXMIXPFOGYENQPYVRDGBMPWPPWPHVDHBGBILEXOZBUGXNBOBVDHBGBQMOPUTLWBFKCYIOZQMZSENRQIAIUOHRVGXNBOBTZWPHCXPZOEOGYCRPHIXKCENBRZNGBNTSPOFRDGBKBFYVRQMPKLSOEPNNPQKUEOPUBCRPOILQMAUHWOXWPCRPOCBGIMRVELSZNVFDNRCMPPVOHVZRVQMOKEZRZOZVECRPHIARVZNXDYGBIIXKVEZRZOZVRPDNYDYVRKRRMSPVDHBGBKUQMPVMGZNGXMYNKOPVSPKFLPHQZWPWPMGPVETLERDXPNEGBIROEVEEQFLSZVDHBGBIGOEVEHQLUDNTSBIUAMQPWPHQZIGOZVFBPNPGWESNENZPKHYYDCDVIRDGBILWBFLBGBPQMTPVDHBGBUBFZCFPSPLUKKRWBFRWPQMZSENRQENIWRDGBBMVZRVFNKUFRXBOHGBGYZRZOIBVDTPFNEOYRQMVEKAALPHUTFPRTACRQEVLOIGVECFYIOZRVRMTGRORTFAZEPVOHESENBRZNKBFYECQMRZBPUTNKRSRCZOSOOBNPRSGXQMIAPLHGYGUBFZPNTSNPONWZFUNCRQBKFRWFRVZQFGOZGXOHFZOLGWZSVZRVZNMBCPPOSTEPOZBPPVOHXPMYPKZRGYQMBPOBZNEOKOVSNYNCOEZSTICRLSPKETYDQBQMOPCGOFIBEOCDTANPZOZCNEFLSZYDQBQMRSSIVBGXLPOZILGKOMIXSOHGFUGXOHGWMGDOOEQMNZPKZVECALWBIBOHCFPSPBOHKUDNFNENSELFSOETUBETSZWBITRNRQZNDLRDGBUELPBIWPAIENQPMVZNLPPNFNRQILPOZCUATPZEYDUBESEOGYOHZPNEZPFRGYENQPYDIKNARIIPEZVDHBGBQMPZRCZORXBICRNPVESONMPKMYTPVSYDRLLPZVECGIPBGCEZXPMVWPADRCZORXRFFTCFNFXPZCCRBUOZPVVRLSZNDLRDGBYGGCPHQMPFETNPZUXPYVGWZRVSRVZNGCOHRVIBGCZEXPHMOPRTRZOPIYWBFRMVZNSTLSXDIUEOHCFGBPHYYDULCKPVCNTIGOFRKUZEUBOHPGQMOKBICMCGVEVDHBGBIPRQFPGTPLRFMPTGLTWPAIVGLACBZNIXSOHGFUIXOHIAIUOHRVQMZEPKSVNPQXLWMQZNXDYGKROPUFQBULPHENEZMPYIZSTICBWPVRQMPKLPKUQMOFXPUYQFBIFTECQMRZBPUTNKOSXPFUZNYVRDGBVEQMBUQMOKVSNYDYKRPOBUGXIYPNOAVTNARNMROZKXDPCMOPRNFRVFRDGBILQMIACRPLPVVQFPCNLSZNVTRWLUNEWDBPGYOHVTNBENQPGCPHVDQPRMKVCGNK'
digraphText = ''
foundDupe = False

for i in range(0, len(cipherText) - 1, 2):
	first = cipherText[i]
	second = cipherText[i+1]
	digraphText += (first + second + " ")
	if (first == second):
		foundDupe = True
		break
print(foundDupe)
# with open("Cipher2Bigraphs.txt", 'a') as out:
# 	out.write(digraphText)